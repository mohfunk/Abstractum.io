{"id":"fy+n","dependencies":[{"name":"/Users/moh/ws/moh/personal/moh.page/package.json","includedInParent":true,"mtime":1564574743497},{"name":"/Users/moh/ws/moh/personal/moh.page/node_modules/sugar/package.json","includedInParent":true,"mtime":1564279111560},{"name":"../../common/internal/assertArgument","loc":{"line":3,"column":29},"parent":"/Users/moh/ws/moh/personal/moh.page/node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","resolved":"/Users/moh/ws/moh/personal/moh.page/node_modules/sugar/common/internal/assertArgument.js"}],"generated":{"js":"\"use strict\";var r=require(\"../../common/internal/assertArgument\");function e(e,t){var n=Array.prototype[e];return function(e,a,o,u){var i=new Array(2);return r(u>0),i[0]=t(a,o),i[1]=o,n.apply(e,i)}}module.exports=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"assertArgument","original":{"line":3,"column":4},"generated":{"line":1,"column":17}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"require","original":{"line":3,"column":21},"generated":{"line":1,"column":19}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":3,"column":29},"generated":{"line":1,"column":27}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":5,"column":0},"generated":{"line":1,"column":67}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"wrapNativeArrayMethod","original":{"line":5,"column":9},"generated":{"line":1,"column":76}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"methodName","original":{"line":5,"column":31},"generated":{"line":1,"column":78}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"wrapper","original":{"line":5,"column":43},"generated":{"line":1,"column":80}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"nativeFn","original":{"line":6,"column":6},"generated":{"line":1,"column":83}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"nativeFn","original":{"line":6,"column":6},"generated":{"line":1,"column":87}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"Array","original":{"line":6,"column":17},"generated":{"line":1,"column":89}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"prototype","original":{"line":6,"column":23},"generated":{"line":1,"column":95}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"methodName","original":{"line":6,"column":33},"generated":{"line":1,"column":105}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":7,"column":9},"generated":{"line":1,"column":108}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":7,"column":9},"generated":{"line":1,"column":115}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"arr","original":{"line":7,"column":18},"generated":{"line":1,"column":124}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"f","original":{"line":7,"column":23},"generated":{"line":1,"column":126}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"context","original":{"line":7,"column":26},"generated":{"line":1,"column":128}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"argsLen","original":{"line":7,"column":35},"generated":{"line":1,"column":130}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"args","original":{"line":8,"column":8},"generated":{"line":1,"column":133}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"args","original":{"line":8,"column":8},"generated":{"line":1,"column":137}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":8,"column":15},"generated":{"line":1,"column":139}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"Array","original":{"line":8,"column":19},"generated":{"line":1,"column":143}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":8,"column":25},"generated":{"line":1,"column":149}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"nativeFn","original":{"line":12,"column":11},"generated":{"line":1,"column":152}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"assertArgument","original":{"line":9,"column":4},"generated":{"line":1,"column":159}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"argsLen","original":{"line":9,"column":19},"generated":{"line":1,"column":161}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":9,"column":29},"generated":{"line":1,"column":163}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"args","original":{"line":10,"column":4},"generated":{"line":1,"column":166}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":10,"column":9},"generated":{"line":1,"column":168}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"wrapper","original":{"line":10,"column":14},"generated":{"line":1,"column":171}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"f","original":{"line":10,"column":22},"generated":{"line":1,"column":173}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"context","original":{"line":10,"column":25},"generated":{"line":1,"column":175}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"args","original":{"line":11,"column":4},"generated":{"line":1,"column":178}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","original":{"line":11,"column":9},"generated":{"line":1,"column":180}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"context","original":{"line":11,"column":14},"generated":{"line":1,"column":183}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"nativeFn","original":{"line":12,"column":11},"generated":{"line":1,"column":185}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"apply","original":{"line":12,"column":20},"generated":{"line":1,"column":187}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"arr","original":{"line":12,"column":26},"generated":{"line":1,"column":193}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"args","original":{"line":12,"column":31},"generated":{"line":1,"column":195}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"module","original":{"line":16,"column":0},"generated":{"line":1,"column":199}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"exports","original":{"line":16,"column":7},"generated":{"line":1,"column":206}},{"source":"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js","name":"wrapNativeArrayMethod","original":{"line":16,"column":17},"generated":{"line":1,"column":214}}],"sources":{"../node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js":"'use strict';\n\nvar assertArgument = require('../../common/internal/assertArgument');\n\nfunction wrapNativeArrayMethod(methodName, wrapper) {\n  var nativeFn = Array.prototype[methodName];\n  return function(arr, f, context, argsLen) {\n    var args = new Array(2);\n    assertArgument(argsLen > 0);\n    args[0] = wrapper(f, context);\n    args[1] = context;\n    return nativeFn.apply(arr, args);\n  };\n}\n\nmodule.exports = wrapNativeArrayMethod;"},"lineCount":null}},"error":null,"hash":"2618b3de7d84a51cec9014ca91b4c5ff","cacheData":{"env":{}}}